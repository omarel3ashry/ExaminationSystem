@model TakeExamViewModel
@{
    Layout = "_Layout";
    ViewData["Title"] = $"{@Model.DepartmentCourse.CourseName} Exam - Examly";
    var mcqQuestions = Model.Exam.Questions.Where(e => e.Type == QVMType.MCQ).ToList();
    var tfQuestions = Model.Exam.Questions.Where(e => e.Type == QVMType.TrueFalse).ToList();
}

<div class="row">
    <div class="col-md-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-12">
                        <div class="table-responsive">
                            <table class="table display expandable-table">
                                <thead>
                                    <tr>
                                        <th>Department</th>
                                        <th>Course Name</th>
                                        <th>Instructor Name</th>
                                        <th>Total Grade</th>
                                        <th>Duration</th>
                                        <th>Timer</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>@Model.DepartmentCourse.DeptName</td>
                                        <td>@Model.DepartmentCourse.CourseName</td>
                                        <td>@Model.DepartmentCourse.InstructorName</td>
                                        <td>@Model.Exam.TotalGrade</td>
                                        <td>@Model.Exam.DurationInMinutes Minutes</td>
                                        <td><span id="timer">00:00:00</span></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<form id="examForm" method="post" asp-controller="Student" asp-action="SubmitExam">
    @if (tfQuestions.Count > 0)
    {
        <h5>T/F Questions:</h5>
        @for (int i = 0; i < tfQuestions.Count; i++)
        {
            <div class="row">
                <div class="col-md-12 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title">@(i + 1). @tfQuestions[i].Text</h4>
                            @foreach (var choice in tfQuestions[i].Choices.OrderBy(e => e.Text))
                            {
                                <div class="form-check">
                                    <label class="form-check-label">
                                        <input type="radio"
                                               id="@choice.Id"
                                               class="form-check-input"
                                               name="tfChoices[@i].Id"
                                               value="@choice.Id"
                                                />
                                        @choice.Text
                                        <i class="input-helper"></i>
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    @if (mcqQuestions.Count > 0)
    {      
        <h5>MCQ Questions:</h5>
        @for (int i = 0; i < mcqQuestions.Count; i++)
        {
            <div class="row">
                <div class="col-md-12 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title">@(i + 1). @mcqQuestions[i].Text</h4>
                            @foreach (var choice in mcqQuestions[i].Choices)
                            {
                                <div class="form-check">
                                    <label class="form-check-label">
                                        <input type="checkbox"
                                               id="@choice.Id"
                                               class="form-check-input"
                                               value="@choice.Id"
                                                />
                                        @choice.Text
                                        <i class="input-helper"></i>
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    <input type="hidden" name="examId" value="@Model.Exam.Id" />
    <button type="submit" id="submitBtn" class="btn btn-primary mr-2">
        Submit Exam
    </button> 
</form>
@section Scripts{
    <script>
        $("#examForm").submit((e) => {
            $("input[type=checkbox]:checked").each((index, input) => {
                input.name = `mcqChoices[${index}].Id`;
            })
        })
    $(function () {
        const startTime = new Date("@Model.Exam.ExamDate");
        const endTime = new Date(startTime.getTime() + @Model.Exam.DurationInMinutes * 60000);

        // method to update timer
        function updateTimer() {
            const currentTime = new Date();
            const timeDifference = endTime - currentTime;

            if (timeDifference <= 0) {
                clearInterval(timerInterval);
                $('#submitBtn').click();
            } else {
                const hours = Math.floor(timeDifference / (1000 * 60 * 60));
                const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);

                $("#timer").text(`${padTime(hours)}:${padTime(minutes)}:${padTime(seconds)}`);
            }
        }
        // method to add zero to single-digit numbers
        function padTime(time) {
            return time < 10 ? "0" + time : time;
        }
        updateTimer();
        // Update the timer every second
        const timerInterval = setInterval(updateTimer, 1000);
    });
    </script>
} 

    
